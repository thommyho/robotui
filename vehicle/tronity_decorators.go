package vehicle

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateTronity(base *Tronity, chargeState func() (api.ChargeStatus, error), vehicleOdometer func() (float64, error), vehicleStartCharge func() error, vehicleStopCharge func() error) api.Vehicle {
	switch {
	case chargeState == nil && vehicleOdometer == nil && vehicleStartCharge == nil && vehicleStopCharge == nil:
		return base

	case chargeState != nil && vehicleOdometer == nil && vehicleStartCharge == nil && vehicleStopCharge == nil:
		return &struct {
			*Tronity
			api.ChargeState
		}{
			Tronity: base,
			ChargeState: &decorateTronityChargeStateImpl{
				chargeState: chargeState,
			},
		}

	case chargeState == nil && vehicleOdometer != nil && vehicleStartCharge == nil && vehicleStopCharge == nil:
		return &struct {
			*Tronity
			api.VehicleOdometer
		}{
			Tronity: base,
			VehicleOdometer: &decorateTronityVehicleOdometerImpl{
				vehicleOdometer: vehicleOdometer,
			},
		}

	case chargeState != nil && vehicleOdometer != nil && vehicleStartCharge == nil && vehicleStopCharge == nil:
		return &struct {
			*Tronity
			api.ChargeState
			api.VehicleOdometer
		}{
			Tronity: base,
			ChargeState: &decorateTronityChargeStateImpl{
				chargeState: chargeState,
			},
			VehicleOdometer: &decorateTronityVehicleOdometerImpl{
				vehicleOdometer: vehicleOdometer,
			},
		}

	case chargeState == nil && vehicleOdometer == nil && vehicleStartCharge != nil && vehicleStopCharge != nil:
		return &struct {
			*Tronity
			api.VehicleChargeController
		}{
			Tronity: base,
			VehicleChargeController: &decorateTronityVehicleChargeControllerImpl{
				vehicleStartCharge: vehicleStartCharge,
			},
		}

	case chargeState == nil && vehicleOdometer == nil && vehicleStartCharge != nil && vehicleStopCharge != nil:
		return &struct {
			*Tronity
			api.VehicleChargeController
		}{
			Tronity: base,
			VehicleChargeController: &decorateTronityVehicleChargeControllerImpl{
				vehicleStartCharge: vehicleStartCharge,
				vehicleStopCharge:  vehicleStopCharge,
			},
		}

	case chargeState != nil && vehicleOdometer == nil && vehicleStartCharge != nil && vehicleStopCharge != nil:
		return &struct {
			*Tronity
			api.ChargeState
			api.VehicleChargeController
		}{
			Tronity: base,
			ChargeState: &decorateTronityChargeStateImpl{
				chargeState: chargeState,
			},
			VehicleChargeController: &decorateTronityVehicleChargeControllerImpl{
				vehicleStartCharge: vehicleStartCharge,
				vehicleStopCharge:  vehicleStopCharge,
			},
		}

	case chargeState == nil && vehicleOdometer != nil && vehicleStartCharge != nil && vehicleStopCharge != nil:
		return &struct {
			*Tronity
			api.VehicleOdometer
			api.VehicleChargeController
		}{
			Tronity: base,
			VehicleOdometer: &decorateTronityVehicleOdometerImpl{
				vehicleOdometer: vehicleOdometer,
			},
			VehicleChargeController: &decorateTronityVehicleChargeControllerImpl{
				vehicleStartCharge: vehicleStartCharge,
				vehicleStopCharge:  vehicleStopCharge,
			},
		}

	case chargeState != nil && vehicleOdometer != nil && vehicleStartCharge != nil && vehicleStopCharge != nil:
		return &struct {
			*Tronity
			api.ChargeState
			api.VehicleOdometer
			api.VehicleChargeController
		}{
			Tronity: base,
			ChargeState: &decorateTronityChargeStateImpl{
				chargeState: chargeState,
			},
			VehicleOdometer: &decorateTronityVehicleOdometerImpl{
				vehicleOdometer: vehicleOdometer,
			},
			VehicleChargeController: &decorateTronityVehicleChargeControllerImpl{
				vehicleStartCharge: vehicleStartCharge,
				vehicleStopCharge:  vehicleStopCharge,
			},
		}
	}

	return nil
}

type decorateTronityChargeStateImpl struct {
	chargeState func() (api.ChargeStatus, error)
}

func (impl *decorateTronityChargeStateImpl) Status() (api.ChargeStatus, error) {
	return impl.chargeState()
}

type decorateTronityVehicleOdometerImpl struct {
	vehicleOdometer func() (float64, error)
}

func (impl *decorateTronityVehicleOdometerImpl) Odometer() (float64, error) {
	return impl.vehicleOdometer()
}

type decorateTronityVehicleChargeControllerImpl struct {
	vehicleStartCharge func() error
	vehicleStopCharge  func() error
}

func (impl *decorateTronityVehicleChargeControllerImpl) StartCharge() error {
	return impl.vehicleStartCharge()
}

func (impl *decorateTronityVehicleChargeControllerImpl) StopCharge() error {
	return impl.vehicleStopCharge()
}
